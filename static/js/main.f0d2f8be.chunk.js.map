{"version":3,"sources":["components/navbar/NavBar.js","storage/apis/StorageAPIIdentifiers.js","storage/actions/CheckboxActions.js","storage/reducers/CheckboxStateReducer.js","APIs/redditAPI/reducers/selectedTopicReducer.js","APIs/redditAPI/actions/actionTypes.js","APIs/redditAPI/reducers/postsByTopicReducer.js","APIs/redditAPI/reducers/rootReducer.js","storage/ReduxStorage.js","components/contentSelection/Checkbox.js","components/contentSelection/ContentSelection.js","components/contentView/ContentView.js","components/mainContent/MainContent.js","components/footer/Footer.js","App.js","registerServiceWorker.js","index.js","res/golemIcon.png","res/redditIcon.png","images/github-logo.svg"],"names":["NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","signedIn","uiConfig","signInFlow","signInOptions","firebase","auth","GoogleAuthProvider","PROVIDER_ID","callbacks","signInSuccess","toggle","bind","assertThisInitialized","isOpen","setState","_this2","onAuthStateChanged","user","currentUser","database","ref","uid","set","username","displayName","email","react_default","a","createElement","className","Navbar","color","expand","NavbarToggler","onClick","Collapse","navbar","Nav","height","width","src","photoURL","alt","signOut","StyledFirebaseAuth_default","firebaseAuth","Component","checkboxNames","CheckboxActions","checkboxList","type","initCheckboxListAction","identifier","selectCheckboxAction","deselectCheckboxAction","initialState","copyCheckboxListWithDifferentValue","index","checked","copiedCheckboxList","assign","i","undefined","checkbox","selectedTopicReducer","arguments","length","action","topic","initialPostState","timestampFetched","isFetching","posts","isInvalidated","postReducer","objectSpread","postsByTopicReducer","defineProperty","combineReducers","selectedTopic","postsByTopic","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","combinedReducers","checkboxIndex","match","getCheckboxIndexByIdentifier","console","log","redditAPI","rootReducer","storage","createStore","applyMiddleware","ReduxThunk","subscribe","getState","Checkbox","updateCheckboxState","dispatch","deselectCheckbox","selectCheckbox","checkboxStates","reddit","golem","FormGroup","check","Label","Input","name","defaultChecked","onChange","labelName","connect","ContentSelection","loadCheckboxStates","contentSelection_Checkbox","key","initCheckboxList","forceUpdate","userId","once","then","snapshot","val","Container","Row","Form","map","InputGroup","placeholder","InputGroupAddon","addonType","Button","aria-label","aria-hidden","ContentView","cards","nextProps","$","getJSON","result","success","newCards","data","push","created","date","card","createGolemCard","id","title","headline","imgUrl","leadimg","url","imgHeight","imgWidth","concat","prevState","sort","b","children","created_utc","createRedditCard","subreddit","j","Math","floor","random","_ref","Col","xs","md","lg","Card","CardBody","golemIcon","CardTitle","target","href","redditIcon","item","MainContent","components_contentSelection_ContentSelection","contentView_ContentView","Footer","rel","githubLogo","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","contextPath","extractContextPath","location","pathname","substring","indexOf","es","store","navbar_NavBar","mainContent_MainContent","components_footer_Footer","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.f0d2f8be.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport {Collapse, Nav, Navbar, NavbarToggler} from 'reactstrap';\n\nimport firebase from 'firebase';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\n\nclass NavBar extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false\n        };\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    // The component's Local state.\n    state = {\n        signedIn: false // Local signed-in state.\n    };\n\n    // Configure FirebaseUI.\n    uiConfig = {\n        // Popup signin flow rather than redirect flow.\n        signInFlow: 'popup',\n        // We will display Google as auth providers.\n        signInOptions: [\n            firebase.auth.GoogleAuthProvider.PROVIDER_ID\n        ],\n        callbacks: {\n            // Avoid redirects after sign-in.\n            signInSuccess: () => false\n        }\n    };\n\n    // Listen to the Firebase Auth state and set the local state.\n    componentDidMount() {\n        firebase.auth().onAuthStateChanged(\n            (user) => this.setState({signedIn: !!user})\n        );\n    }\n\n    test() {\n        let currentUser = firebase.auth().currentUser;\n        firebase.database().ref('users/' + currentUser.uid).set({\n            username: currentUser.displayName,\n            email: currentUser.email\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"navbar-footer-background navbar-border mb-2\">\n                <Navbar color=\"faded\" expand=\"md\">\n                    <a className=\"navbar-brand\">\n                        SuperProcrastinator\n                    </a>\n                    <NavbarToggler onClick={this.toggle}/>\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav className=\"ml-auto\" navbar>\n                            {!this.state.signedIn\n                                ? <StyledFirebaseAuth uiConfig={this.uiConfig} firebaseAuth={firebase.auth()}/>\n                                : (\n                                    <div className=\"my-auto\">\n                                        <img height=\"42\" width=\"42\" className=\"img-fluid rounded-circle mr-3\"\n                                             src={firebase.auth().currentUser.photoURL} alt=\"userPhoto\"/>\n                                        <a className=\"btn btn-primary text-white\"\n                                           onClick={() => firebase.auth().signOut()}>Sign Out</a>\n                                    </div>\n                                )\n                            }\n                        </Nav>\n                    </Collapse>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\nexport default NavBar;\n","const checkboxNames = {\n    reddit: 'reddit',\n    golem: 'golem'\n};\n\nexport {checkboxNames};\n","\nclass CheckboxActions {\n\n    static initCheckboxListAction = 'checkbox:initCheckboxList';\n    static selectCheckboxAction = 'checkbox:selectCheckbox';\n    static deselectCheckboxAction = 'checkbox:deselectCheckbox';\n\n    static initCheckboxList(checkboxList) {\n        return {\n            type: this.initCheckboxListAction,\n            checkboxList: checkboxList\n        };\n    }\n\n    static selectCheckbox(identifier) {\n        return {\n            type: this.selectCheckboxAction,\n            identifier: identifier\n        };\n    }\n\n    static deselectCheckbox(identifier) {\n        return {\n            type: this.deselectCheckboxAction,\n            identifier: identifier\n        };\n    }\n}\n\nexport {CheckboxActions};\n\n","import {CheckboxActions} from '../actions/CheckboxActions';\n\nlet initialState = {\n    checkboxList: []\n};\n\nfunction updateCheckboxState(state = initialState, action) {\n    //console.log(\"Reducer state: \");\n    //console.log(state);\n    let checkboxIndex = -1;\n    if (action.type.match(/^checkbox:(de)?selectCheckbox$/)) {\n        //console.log(\"state.checkboxList\");\n        //console.log(state.checkboxList);\n        checkboxIndex = getCheckboxIndexByIdentifier(state.checkboxList, action.identifier);\n    }\n\n    switch (action.type) {\n        case CheckboxActions.initCheckboxListAction:\n            console.log(\"action \" + CheckboxActions.initCheckboxListAction);\n            return Object.assign({}, state, {\n                checkboxList:  action.checkboxList\n            });\n\n        case CheckboxActions.selectCheckboxAction:\n            console.log(\"action \" + CheckboxActions.selectCheckboxAction);\n            return Object.assign({}, state, {\n                checkboxList: copyCheckboxListWithDifferentValue(state.checkboxList, checkboxIndex, true)\n            });\n\n        case CheckboxActions.deselectCheckboxAction:\n            console.log(\"action \" + CheckboxActions.deselectCheckboxAction);\n            return Object.assign({}, state, {\n                checkboxList: copyCheckboxListWithDifferentValue(state.checkboxList, checkboxIndex, false)\n            });\n        default:\n            return state;\n    }\n}\n\nfunction copyCheckboxListWithDifferentValue(checkboxList, index, checked) {\n    const copiedCheckboxList = Object.assign({}, checkboxList, {});\n\n    let i = 0;\n    while (copiedCheckboxList[i] !== undefined) {\n        const checkbox = copiedCheckboxList[i];\n        if (i === index) {\n            copiedCheckboxList[i] = Object.assign({}, checkbox, {\n                checked: checked\n            });\n            break;\n        }\n        i++;\n    }\n\n    return copiedCheckboxList;\n}\n\nfunction getCheckboxIndexByIdentifier(checkboxList, identifier) {\n    let index = 0;\n    while (checkboxList[index] !== undefined) {\n        const checkbox = checkboxList[index];\n        if (checkbox.props.identifier === identifier) {\n            return index;\n        }\n        index++;\n    }\n\n    return -1;\n}\n\nexport {updateCheckboxState};\n","import { SELECT_TOPIC } from \"../actions/actionTypes\";\n\nconst initialState = null;\n\nconst selectedTopicReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SELECT_TOPIC:\n      return action.topic;\n    default:\n      return state;\n  }\n};\n\nexport default selectedTopicReducer;\n","export const SELECT_TOPIC = \"SELECT_TOPIC\";\n\nexport const REQUEST_POSTS = \"REQUEST_POSTS\";\n\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\n\nexport const INVALIDATE_TOPIC = \"INVALIDATE_TOPIC\";\n","import {\n  RECEIVE_POSTS,\n  REQUEST_POSTS,\n  INVALIDATE_TOPIC\n} from \"../actions/actionTypes\";\n\nconst initialState = {};\n\nconst postsByTopicReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INVALIDATE_TOPIC:\n    case REQUEST_POSTS:\n    case RECEIVE_POSTS:\n      return {\n        ...state,\n        [action.topic]: postReducer(state[action.topic], action)\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst initialPostState = {\n  timestampFetched: null,\n  isFetching: false,\n  posts: [],\n  isInvalidated: false\n};\n\nconst postReducer = (state = initialPostState, action) => {\n  switch (action.type) {\n    case INVALIDATE_TOPIC:\n      return {\n        ...state,\n        isInvalidated: true\n      };\n    case REQUEST_POSTS:\n      return {\n        ...state,\n        isFetching: true,\n        isInvalidated: false\n      };\n    case RECEIVE_POSTS:\n      return {\n        ...state,\n        isFetching: false,\n        isInvalidated: false,\n        posts: action.posts,\n        timestampFetched: action.timestampFetched\n      };\n    default:\n      return state;\n  }\n};\n\nexport default postsByTopicReducer;\n","import { combineReducers } from \"redux\";\nimport selectedTopicReducer from \"./selectedTopicReducer\";\nimport postsByTopicReducer from \"./postsByTopicReducer\";\n\nexport default combineReducers({\n  selectedTopic: selectedTopicReducer,\n  postsByTopic: postsByTopicReducer\n});\n","import {updateCheckboxState} from \"./reducers/CheckboxStateReducer\";\nimport rootReducer from \"../APIs/redditAPI/reducers/rootReducer\";\nimport ReduxThunk from \"redux-thunk\";\nimport {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nlet combinedReducers = combineReducers({\n    checkboxList: updateCheckboxState,\n    redditAPI: rootReducer\n});\n\n// Create the single redux storage by combining the reducers from the checkboxes\n// and from the Reddit API\nlet storage = createStore(\n    combinedReducers,\n    composeEnhancers(applyMiddleware(ReduxThunk))\n);\n\nstorage.subscribe(() => {\n    console.log(\"State in storage changed!\");\n    console.log(storage.getState());\n});\n\nexport {storage};\n","import React, {Component} from 'react';\nimport {FormGroup, Input, Label} from 'reactstrap';\nimport './ContentSelection.css';\nimport PropTypes from 'prop-types';\nimport firebase from 'firebase';\nimport {CheckboxActions} from \"../../storage/actions/CheckboxActions\";\nimport {storage} from '../../storage/ReduxStorage';\nimport {connect} from \"react-redux\";\n\nclass Checkbox extends Component {\n\n    constructor(props) {\n        super(props);\n        console.log(\"Checkbox props\");\n        console.log(props);\n\n        this.state = {\n            checked: props.checked\n        };\n\n        this.updateCheckboxState = this.updateCheckboxState.bind(this);\n    }\n\n    updateCheckboxState() {\n        if (this.state.checked) {\n            storage.dispatch(CheckboxActions.deselectCheckbox(this.props.identifier));\n            this.setState({checked: false});\n        } else {\n            storage.dispatch(CheckboxActions.selectCheckbox(this.props.identifier));\n            this.setState({checked: true});\n        }\n\n        console.log(this.props.identifier);\n        const checkboxStates = {\n            reddit: storage.getState().checkboxList.checkboxList[0].checked !== undefined ? storage.getState().checkboxList.checkboxList[0].checked : false,\n            golem: storage.getState().checkboxList.checkboxList[1].checked !== undefined ? storage.getState().checkboxList.checkboxList[1].checked : false\n        };\n\n        console.log(\"checkboxStates\");\n        console.log(checkboxStates);\n\n        if (firebase.auth().currentUser) {\n            let currentUser = firebase.auth().currentUser;\n            firebase.database().ref(\"/users/\" + currentUser.uid).set({\n                reddit: checkboxStates.reddit,\n                golem: checkboxStates.golem\n            });\n        }\n    }\n\n    render() {\n        return (\n            <FormGroup check>\n                <Label check>\n                    <Input type=\"checkbox\" name={this.props.identifier}\n                           onClick={this.updateCheckboxState} defaultChecked={this.state.checked}\n                           onChange={this.onChange}/>{' '}\n                    {this.props.labelName}\n                </Label>\n            </FormGroup>\n        );\n    }\n}\n\nCheckbox.propTypes = {\n    identifier: PropTypes.string.isRequired,\n    labelName: PropTypes.string.isRequired,\n};\n\nlet getCheckboxIndexByIdentifier = (checkboxList, identifier) => {\n    let index = 0;\n    while (checkboxList[index] !== undefined) {\n        const checkbox = checkboxList[index];\n        if (checkbox.props.identifier === identifier) {\n            return index;\n        }\n        index++;\n    }\n\n    return -1;\n};\n\nlet mapStateToProps = (state, props) => {\n    const checkboxIndex = getCheckboxIndexByIdentifier(state.checkboxList.checkboxList, props.identifier);\n\n    if (checkboxIndex >= 0) {\n        const checkbox = state.checkboxList.checkboxList[checkboxIndex];\n        return {\n            identifier: checkbox.props.identifier,\n            labelName: checkbox.props.labelName\n        };\n    }\n\n    return null;\n};\n\nexport default connect(mapStateToProps)(Checkbox);\n","import React, {Component} from 'react';\nimport {Button, Container, Form, Input, InputGroup, InputGroupAddon, Label, Row} from 'reactstrap';\nimport './ContentSelection.css';\nimport {checkboxNames} from \"../../storage/apis/StorageAPIIdentifiers\";\nimport Checkbox from \"./Checkbox\";\nimport {storage} from \"../../storage/ReduxStorage\";\nimport {CheckboxActions} from \"../../storage/actions/CheckboxActions\";\nimport firebase from 'firebase';\n\nclass ContentSelection extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.checkboxList = [];\n    }\n\n    componentDidMount() {\n        firebase.auth().onAuthStateChanged(\n            (user) => {\n                if (user) {\n                    this.loadCheckboxStates();\n                } else {\n                    this.checkboxList = [\n                        <Checkbox key={checkboxNames.reddit} identifier={checkboxNames.reddit}\n                                  labelName=\"Reddit\" checked={false}/>,\n                        <Checkbox key={checkboxNames.golem} identifier={checkboxNames.golem}\n                                  labelName=\"Golem\" checked={false}/>\n                    ];\n\n                    console.log(\"Dispatching content selection with array\");\n                    console.log(this.checkboxList);\n                    console.log(\"Sending ...\");\n                    storage.dispatch(CheckboxActions.initCheckboxList(this.checkboxList));\n\n                    this.forceUpdate();\n                }\n            }\n        );\n    }\n\n    loadCheckboxStates() {\n        if (firebase.auth().currentUser) {\n            console.log(\"Logged in\");\n            let userId = firebase.auth().currentUser.uid;\n            let ref = this;\n            console.log(\"User UID: \" + userId);\n            firebase.database().ref('/users/' + userId).once('value').then(function (snapshot) {\n                if (snapshot.val()) {\n                    let checkboxStates = {\n                        reddit: snapshot.val().reddit,\n                        golem: snapshot.val().golem\n                    };\n\n                    ref.checkboxList = [\n                        <Checkbox key={checkboxNames.reddit} identifier={checkboxNames.reddit}\n                                  labelName=\"Reddit\" checked={checkboxStates.reddit}/>,\n                        <Checkbox key={checkboxNames.golem} identifier={checkboxNames.golem}\n                                  labelName=\"Golem\" checked={checkboxStates.golem}/>\n                    ];\n\n                    console.log(\"Dispatching content selection with array\");\n                    console.log(ref.checkboxList);\n                    console.log(\"Sending ...\");\n                    storage.dispatch(CheckboxActions.initCheckboxList(ref.checkboxList));\n\n                    ref.forceUpdate();\n                }\n            });\n        }\n    }\n\n\n    render() {\n        return (\n            <Container className=\"ContentSelection\">\n                <Row>\n                    <h4>Active Content</h4>\n                </Row>\n                <hr/>\n                <Row>\n                    <Form>\n                        <ul className=\"list-group\">\n                            {this.checkboxList.map(checkbox => {\n                                return (<li>{checkbox}</li>);\n                            })}\n                        </ul>\n                    </Form>\n                </Row>\n                <hr/>\n                <Row>\n                    <h4>Active Subreddits</h4>\n                </Row>\n                <br/>\n                <Row>\n                    <InputGroup>\n                        <Input placeholder=\"Enter subreddit...\"/>\n                        <InputGroupAddon addonType=\"append\"><Button color=\"primary\">Add</Button></InputGroupAddon>\n                    </InputGroup>\n                </Row>\n                <br/>\n                <Row>\n                    <div className=\"input-group\">\n                        <div className=\"form-group has-feedback has-clear\">\n                            <Label>Subreddit 1</Label>\n                            <button type=\"button\" className=\"close align-top\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                    </div>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default ContentSelection;\n","import React, {Component} from 'react';\nimport {Button, Card, CardBody, CardTitle, Col, Row} from 'reactstrap';\nimport $ from 'jquery';\n\nimport golemIcon from '../../res/golemIcon.png';\nimport redditIcon from '../../res/redditIcon.png';\n\nimport {connect} from \"react-redux\";\nimport {checkboxNames} from \"../../storage/apis/StorageAPIIdentifiers\";\n\nlet DEVKEY = \"4ef0b5c4164a4c5be46667df84ba4db8\";\n\n// Mit diesem key erhält man die richtigen artikel -> Zugriffslimit ist 500/Tag. Zum testen (ohne LImit) den oberen key verwenden\n//let DEVKEY = \"8d44fd1fafc4d2a95b01ffbdb14f02a8\";\n\nclass ContentView extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            cards: [],\n            checkboxList: []\n        };\n    }\n\n    getCheckboxIndexByIdentifier(checkboxList, identifier) {\n        let index = 0;\n        while (checkboxList[index] !== undefined) {\n            const checkbox = checkboxList[index];\n            if (checkbox.props.identifier === identifier) {\n                return index;\n            }\n            index++;\n        }\n\n        return -1;\n    }\n\n    componentWillUpdate() {\n        console.log(\"componentWillUpdate state:\");\n        console.log(\"will update\");\n    }\n\n    componentWillReceiveProps(nextProps) {\n        console.log(\"componentWillReceiveProps\");\n        console.log(nextProps);\n\n        this.setState({cards: []});\n\n        let ref = this;\n        const checkboxList = nextProps.checkboxList;\n\n        let checkboxIndex = this.getCheckboxIndexByIdentifier(checkboxList, checkboxNames.golem);\n\n        if (checkboxList[checkboxIndex].checked) {\n            $.getJSON(\"http://api.golem.de/api/article/latest/?key=\" + DEVKEY + \"&jsonp=?\",\n                function (result) {\n                    if (result.success) {\n                        let newCards = [];\n                        let data = result.data;\n                        for (let i = 0; i < data.length; i++) {\n                            newCards.push({\n                                created: data[i].date,\n                                card: ref.createGolemCard({\n                                    id: \"Golem_\" + i,\n                                    date: data[i].date,\n                                    title: data[i].headline,\n                                    imgUrl: data[i].leadimg.url,\n                                    imgHeight: data[i].leadimg.height,\n                                    imgWidth: data[i].leadimg.width,\n                                    url: data[i].url\n                                })\n                            });\n                        }\n                        ref.setState({cards: ref.state.cards.concat(newCards)});\n\n                        ref.setState(prevState => {\n                            ref.state.cards.sort((a, b) => b.created - a.created);\n                        });\n                    }\n                }\n\n            );\n            //this.setState({cards: this.shuffleCards(this.state.cards)});\n        }\n\n        checkboxIndex = this.getCheckboxIndexByIdentifier(checkboxList, checkboxNames.reddit);\n        if (checkboxList[checkboxIndex].checked) {\n            $.getJSON(\"https://www.reddit.com/r/redditdev/.json\",\n                function (result) {\n                    if (result) {\n                        console.log(result);\n                        let newCards = [];\n                        let data = result.data.children;\n                        for (let i = 0; i < 10; i++) {\n                            newCards.push({\n                                created: data[i].data.created_utc,\n                                card: ref.createRedditCard({\n                                    id: \"Reddit_\" + i,\n                                    title: data[i].data.title,\n                                    url: data[i].data.url,\n                                    subreddit: data[i].data.subreddit\n                                })\n                            });\n                        }\n                        ref.setState({cards: ref.state.cards.concat(newCards)});\n\n                        ref.setState(prevState => {\n                            ref.state.cards.sort((a, b) => b.created - a.created);\n                        });\n                    }\n                }\n            );\n\n            //this.setState({cards: this.shuffleCards(this.state.cards)});\n        }\n    }\n\n    shuffleCards(cards) {\n        for (let i = cards.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [cards[i], cards[j]] = [cards[j], cards[i]];\n        }\n        return cards;\n    }\n\n    createGolemCard(props) {\n        return (\n            <Col key={props.id} xs=\"0\" md=\"4\" lg=\"3\" className=\"mb-3\">\n                <Card className=\"myCard\">\n                    <CardBody>\n                        <div>\n                            <img className=\"d-inline img-fluid\" height={props.imgHeight} width={props.imgWidth}\n                                 src={props.imgUrl} alt=\"golemCard\"/>\n                            <img className=\"d-inline float-right img-fluid rounded-circle\" height=\"80\" width=\"80\"\n                                 src={golemIcon} alt=\"golemIcon\"/>\n                        </div>\n                        <CardTitle>{props.title}</CardTitle>\n                        <Button target=\"_blank\" href={props.url} color=\"primary\">Continue reading</Button>\n                    </CardBody>\n                </Card>\n            </Col>\n        );\n    }\n\n    createRedditCard(props) {\n        return (\n            <Col key={props.id} xs=\"0\" md=\"4\" lg=\"3\" className=\"mb-3\">\n                <Card className=\"myCard\">\n                    <CardBody>\n                        <div>\n                            <img className=\"float-right img-fluid rounded-circle\" height=\"80\" width=\"80\"\n                                 src={redditIcon} alt=\"redditIcon\"/>\n                        </div>\n                        <CardTitle>{props.subreddit}</CardTitle>\n                        <CardBody>{props.title}</CardBody>\n                        <Button target=\"_blank\" href={props.url} color=\"primary\">Continue reading</Button>\n                    </CardBody>\n                </Card>\n            </Col>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <Row>\n                    {this.state.cards.map(function (item) {\n                        return item.card;\n                    })}\n                </Row>\n            </div>\n        );\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        ...state,\n        checkboxList: state.checkboxList.checkboxList\n    }\n};\n\nexport default connect(mapStateToProps)(ContentView);\n","/**\n * Created by SolDeEcuador on 28/02/2018.\n */\nimport React, {Component} from 'react';\nimport ContentSelection from '../contentSelection/ContentSelection';\nimport {Row, Col} from 'reactstrap';\nimport ContentView from '../contentView/ContentView';\n\nclass MainContent extends Component {\n    render() {\n        return (\n            <Row className=\"mainContent mx-3\">\n                <Col xs=\"0\" md=\"3\" lg=\"2\" className=\"contentSelection\">\n                    <ContentSelection/>\n                </Col>\n                <Col md=\"9\" lg=\"10\" className=\"contentView\">\n                    <ContentView/>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nexport default MainContent;\n","import React, {Component} from 'react';\nimport './Footer.css';\nimport githubLogo from '../../images/github-logo.svg';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div className=\"Footer py-4 navbar-footer-background footer-border\">\n                <a href=\"https://github.com/mortenterhart/super-procrastinator\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <img alt=\"Github Logo\" src={githubLogo} className=\"github-logo\" width=\"30\" height=\"30\"/>\n                </a>\n                <a className=\"d-inline mr-5\" href=\"https://github.com/mortenterhart/super-procrastinator\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\n                <p className=\"d-inline\">Copyright &copy; 2018 SuperProcrastinator Inc.</p>\n            </div>\n        );\n    }\n}\n\nexport default Footer;\n","import React, {Component} from 'react';\nimport './App.css';\nimport NavBar from './components/navbar/NavBar';\nimport MainContent from './components/mainContent/MainContent';\n\nimport Footer from './components/footer/Footer';\n\nimport {Provider} from 'react-redux';\nimport {storage} from \"./storage/ReduxStorage\";\nimport firebase from \"firebase\";\n\nconst config = {\n    apiKey: \"AIzaSyDew41OBlxbC6VB8WOgA-d6mDlyJx-mh_E\",\n    authDomain: \"superprocrastinator-d826b.firebaseapp.com\",\n    databaseURL: \"https://superprocrastinator-d826b.firebaseio.com\",\n    projectId: \"superprocrastinator-d826b\",\n    storageBucket: \"superprocrastinator-d826b.appspot.com\",\n    messagingSenderId: \"340186055169\"\n};\n\nfirebase.initializeApp(config);\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.contextPath = this.extractContextPath();\n    }\n\n    extractContextPath() {\n        return window.location.pathname.substring(0, window.location.pathname.indexOf(\"/\", 2));\n    }\n\n    render() {\n        return (\n            <Provider store={storage}>\n                <div className=\"background\">\n                    <NavBar/>\n                    <MainContent/>\n                    <Footer/>\n                </div>\n            </Provider>\n        );\n    }\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render((\n    <App/>\n), document.getElementById('root'));\n\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/golemIcon.cbb9637b.png\";","module.exports = __webpack_public_path__ + \"static/media/redditIcon.63204bbb.png\";","module.exports = __webpack_public_path__ + \"static/media/github-logo.b53ff55e.svg\";"],"sourceRoot":""}